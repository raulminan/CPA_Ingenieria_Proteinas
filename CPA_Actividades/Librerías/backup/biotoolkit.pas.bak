unit biotoolkit;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, Math, Graphics, Dialogs, Forms, Controls, Menus,
  StdCtrls, ExtCtrls;

//types

type

  TPunto = record
    X,Y,Z: real;
  end;

  TPuntos = array of TPunto;

  TAtomPDB = record
    NumAtom: integer;
    ID: string;
    residuo: string;
    subunidad: char;
    NumRes: integer;
    coor: Tpunto;
    R: real;
  end;

  TResiduoPDB = record
    NumRes: integer;
    Subunidad: char;
    ID1: char;
    ID3: string;
    atm1, atmn: integer;
    N, CA, C, O: integer;
    phi, psi: real;
  end;

  TsubunidadPDB = record
    ID: char;
    atm1, atmN, res1, resN: integer;
    atomCount, resCount: integer;
    ResIndex: array of integer;
  end;

  TPDB = record
    header: string;
    atm: array of TAtomPDB;
    res: array of TResiduoPDB;
    sub: array of TsubunidadPDB;
    NumFichas, NumResiduos, NumSubunidades: integer;
    subs, secuencia: string;
  end;

  TTablaDatos = array of array of real;
  TTransformTPuntoFunc = function(a: real; X:TPunto): TPunto;

//constants

const
   AA = '    ALA-A ARG-R ASN-N ASP-D CYS-C GLN-Q GLU-E GLY-G HIS-H ILE-I'
    +' LEU-L LYS-K MET-M PHE-F PRO-P SER-S THR-T TRP-W TYR-Y VAL-V';

//public functions

//format
function AA3to1 (AA3: string): char;
function AA1to3 (AA1: char): string;

//vectors
function modulo(V: TPunto): real;
function angulo(A, B: TPunto): real;
function angulo(A, B, C: TPunto): real; overload;
function distancia3D(p1, p2: Tpunto): real; overload;
function distancia3D(a1, b1, c1, a2, b2, c2: real): real;
function prodVectorial(A, B: TPunto): TPunto;
function torsion (A, B, C, D: TPunto): real;
function prodEscalar(A, B: TPunto): real;
function sumaV(A, B: TPunto): TPunto;
function diferenciaV(A, B: TPunto): TPunto;
function EscalarV(k: real; V: TPunto): TPunto;

//PDB
function CargarPDB(texto: TStrings): TPDB; overload;
function cargarPDB(var p: TPDB): string;

//graphic functions
function PlotXY(datos: TTablaDatos; im: TImage; OX: integer = 0;
                OY: integer =1; borrar: boolean = False;
                linea: boolean = False;
                clpluma: TColor = clyellow;
                clrelleno: TColor = clyellow;
                clFondo: TColor = clBlack;
                radio: integer = 3; borde: integer = 40;
                marcarFin: boolean = False; clfin: TColor = clred): boolean;


//eje z
function traslacion(dx, dy, dz: real; V: TPunto): TPunto;
function traslacion(dx, dy, dz: real; datos: TPuntos): TPuntos; overload;
function traslacion(dx, dy, dz: real; var p: TPDB): integer; overload;
function GiroOX(rad: real; V: TPunto): TPunto;
function GiroOX(rad: real; datos: TPuntos): TPuntos; overload;
function GiroOX(rad: real; var p: TPDB): integer; overload;
function GiroOY(rad: real; V: TPunto): TPunto;
function GiroOY(rad: real; datos: TPuntos): TPuntos; overload;
function GiroOY(rad: real; var p: TPDB): integer; overload;
function girarTPuntos(rad: real; datos: TPuntos; function_girar:TTransformTPuntoFunc): TPuntos;
function GiroOZ(rad: real; V: TPunto): TPunto;
function GiroOZ(rad: real; datos: TPuntos): TPuntos; overload;
function GiroOZ(rad: real; var p: TPDB): integer; overload;
function Alinear_eje_Z(puntos: TPuntos): TPuntos;

implementation

//format functions

function AA3to1 (AA3: string): char;
    begin
       result:= AA[pos(AA3, AA) + 4];
    end;

function AA1to3 (AA1: char): string;
var index: integer;
  begin
     index:=pos(AA1, AA)-1;
     result:= copy(AA, index, 3);
  end;

//vector functions

function modulo(V: TPunto): real;
  begin
    result := sqrt(sqr(V.X) + sqr(V.Y) + sqr(V.Z));
  end;

function angulo(A, B: TPunto): real;
  var
    numerador, denominador: real;
  begin
    numerador:= prodEscalar(A, B);
    denominador:= modulo(A)*modulo(B);
    if denominador > 0
       then result := arccos(numerador/denominador)
    else result := maxfloat;
  end;

function angulo(A, B, C: TPunto): real; overload;
//angulo entre 3 puntos. El C es el ángulo///
  var
    BA, BC: TPunto;
  begin
    BA:= diferenciaV(A, B);
    BC:= diferenciaV(C, B);
    result:= angulo(BA, BC);
  end;

function distancia3D(a1, b1, c1, a2, b2, c2: real): real;
  begin
   result :=sqrt(sqr(a1-a2)+sqr(b1-b2)+sqr(c1-c2));
  end;

function distancia3D(p1, p2: Tpunto): real; overload;
  begin
   result :=sqrt(sqr(p1.X-p2.X)+sqr(p1.Y-p2.Y)+sqr(p1.Z-p1.Z));
  end;

function prodVectorial(A,B: TPunto): TPunto;
  var
    V:TPunto;
  begin
    V.X := A.Y*B.Z - A.Z*B.Y;
    V.Y := A.Z*B.X - A.X*B.Z;
    V.Z := A.X*B.Y - A.Y*B.X;
    result := V;
  end;

function torsion (A, B, C, D: TPunto): real;
  var
      BA, BC, CB, CD, V1, V2, P: TPunto;
      denominador, diedro, diedro_iupac, cosGamma: real;
    begin
      diedro_iupac:= 0;
      BA:= diferenciaV(A,B);
      BC:= diferenciaV(C,B);
      CB:= diferenciaV(B,C);
      CD:= diferenciaV(D,C);
      V1 := prodVectorial(BC, BA);
      V2 := prodVectorial(CD, CB);
      diedro := angulo(V1, V2);
      P:= prodVectorial(V2, V1);
      denominador:= modulo(P)*modulo(CB);
      if denominador > 0 then
        begin
          cosGamma:= prodEscalar(P, CB)/denominador;
          if cosGamma > 0 then cosGamma:= 1 else cosGamma:= -1;
        end else diedro_iupac:= maxfloat;
      if diedro < maxfloat then diedro_iupac:= diedro*cosGamma;
        result:= diedro_iupac;
    end;

function prodEscalar(A, B: TPunto): real;
  begin
    result:= A.X * B.X + A.Y*B.Y + A.Z*B.Z;
  end;

function sumaV(A, B: TPunto): TPunto;
  var
    V: TPunto;
  begin
    V.X := A.X + B.X;
    V.Y := A.Y + B.Y;
    V.Z := A.Z + B.Z;
    result:= V;
  end;

function diferenciaV(A, B: TPunto): TPunto;
  var
    V: TPunto;
  begin
    V.X := A.X - B.X;
    V.Y := A.Y - B.Y;
    V.Z := A.Z - B.Z;
    result:= V;
  end;

function EscalarV(k: real; V: TPunto): TPunto;
  begin
    result.X := k*V.X;
    result.Y := k*V.Y;
    result.Z := k*V.Z;
  end;

//PDB functions

function leerLinea_int(linea:string; num1, num2:integer): integer;
  begin
    result := strtoint(trim(copy(linea, num1, num2)));
  end;

function leerLinea_float(linea:string; num1, num2:integer): real;
  begin
    result := strtofloat(trim(copy(linea, num1, num2)));
  end;

function leerLinea_str(linea:string; num1, num2:integer): string;
  begin
    result := trim(copy(linea, num1, num2));
  end;


function cargarPDB(var p: TPDB): string;
  var
    dialogo: TOpenDialog;
    textoPDB: TStrings;
  begin
     dialogo:= TOpenDialog.create(application);
     textoPDB:= TStringlist.create;

     if dialogo.execute then
       begin
        textoPDB.loadfromfile(dialogo.filename);
        p:=cargarPDB(textoPDB);
        result:= dialogo.filename;

       end else result:= '';

     dialogo.free;
     textoPDB.free;
  end;

function CargarPDB(texto: TStrings): TPDB; overload;
  var
    j, k, F, R, S: integer;
    p: TPDB;
    linea: string;
    resno: integer;
  begin
    //ponemos los contadores a 0
    F:=0;
    R:= 0;
    S:= 0;

    //iniciamos como cadena vacía
    p.secuencia:= '';
    p.subs := '';

    //asignamos longitud sobreestimándola
    setLength(p.atm, texto.count);
    setLength(p.res, texto.count);
    setLength(p.sub, texto.count);

    for j:= 0 to texto.count-1 do
    begin
     linea:= texto[j];
     if copy(linea, 1, 6) = 'ATOM  ' then
     begin
       F:= F +1;
       p.atm[F].NumAtom:= strtoint(trim(copy(linea, 7, 5)));
       p.atm[F].ID:= trim(copy(linea, 13, 4));
       p.atm[F].residuo:= trim(copy(linea, 18, 3));
       p.atm[F].subunidad:=linea[22];
       p.atm[F].NumRes:= strtoint(trim(copy(linea, 23, 4)));
       p.atm[F].coor.X:=strtofloat(trim(copy(linea, 31, 8)));
       p.atm[F].coor.Y:=strtofloat(trim(copy(linea, 39, 8)));
       p.atm[F].coor.Z:=strtofloat(trim(copy(linea, 47, 8)));
       p.atm[F].R :=strtofloat(trim(copy(linea, 61, 6)));

       if p.atm[F].ID = 'N' then
          begin
            R:= R+1;
            p.res[R].NumRes := p.atm[F].NumRes;
            p.res[R].subunidad := p.atm[F].subunidad;
            p.res[R].ID3 := p.atm[F].residuo;
            p.res[R].ID1 := aa3to1(p.res[R].ID3);
            p.secuencia := p.secuencia + p.res[R].ID1;
            p.res[R].atm1 := F;
            p.res[R].N := F;

            if pos(p.atm[F].subunidad, p.subs)=0 then
               begin
                 S:= S+1;
                 p.subs:= p.subs + p.atm[F].subunidad;
                 p.sub[S].ID:= p.atm[F].subunidad;
                 p.sub[S].atm1:= F;
                 p.sub[S].res1:= R;

               end;
          end;

       if p.atm[F].ID = 'CA' then p.res[R].CA := F;
       if p.atm[F].ID = 'C' then p.res[R].C := F;
       if p.atm[F].ID = 'O' then p.res[R].O := F;
       p.res[R].atmN:= F;
       p.sub[S].atmN:= F;
       p.sub[S].resN:= R;

     end;
     end;
     p.NumFichas:= F;
     p.NumResiduos:= R;
     p.NumSubunidades:= S;
     setLength(p.atm, F+1);
     setLength(p.res, R+1);
     setLength(p.sub, S+1);

     for j:=1 to p.NumSubunidades do with p.sub[j] do
     begin
      AtomCount:= atmN - atm1 +1;
      ResCount:= resN-res1 +1;
      for k:= p.sub[j].res1 +1 to p.sub[j].resN -1 do
      begin
          p.res[k].phi:=torsion(p.atm[p.res[k-1].C].coor,
                                p.atm[p.res[k].N].coor,
                                p.atm[p.res[k].CA].coor,
                                p.atm[p.res[k].C].coor);

          p.res[k].psi:=torsion(p.atm[p.res[k].N].coor,
                                p.atm[p.res[k].CA].coor,
                                p.atm[p.res[k].C].coor,
                                p.atm[p.res[k+1].N].coor);

        end;

        setlength(p.sub[j].resindex, p.NumResiduos + 1);
        for k:=1 to p.sub[j].ResCount do
        begin
          resno:= p.sub[j].res1 + k - 1;
          p.sub[j].resindex[p.res[resno].numres]:= resno;
        end;
      end;
      result:=p;
    end;



//graphs

function PlotXY(datos: TTablaDatos; im: TImage; OX: integer = 0;
                OY: integer =1; borrar: boolean = False;
                linea: boolean = False;
                clpluma: TColor = clyellow;
                clrelleno: TColor = clyellow;
                clFondo: TColor = clBlack;
                radio: integer = 3; borde: integer = 40;
                marcarFin: boolean = False; clfin: TColor = clred): boolean;

  var
    j: integer;
    xp, yp: integer;
    xmin, xmax, ymin, ymax, rangox, rangoy: real;
    ancho, alto: integer;
    OK: boolean;

    function XPixel(x:real): integer;
      begin
          result:= round(((ancho-2*borde)*(x-xmin)/rangox)+borde);
      end;

    function YPixel(y:real): integer;
      begin
          result:= round(alto-(((alto-2*borde)*(y-ymin)/rangoy)+borde));
      end;

  begin
    OK:= true;
    xmin:= minValue(datos[OX]);
    xmax:= maxValue(datos[OX]);
    ymin:= minValue(datos[OY]);
    ymax:= maxValue(datos[OY]);
    rangox:= xmax-xmin;
    rangoy:= ymax-ymin;

    if (rangox=0) or (rangoy=0) then OK:= False
    else
    begin
    ancho := im.Width;
    alto:= im.Height;

    if borrar then
    begin
      im.Canvas.Brush.Color:= clfondo;
      im.Canvas.clear;
    end;


    im.Canvas.Pen.Color:= clpluma;
    im.Canvas.brush.color:= clrelleno;

    xp:= XPixel(datos[OX, 0]);  //punto inicial
    yp:= YPixel(datos[OY, 0]);  //punto inicial
    im.Canvas.MoveTo(xp, yp);

    for j:=0 to high(datos[0]) do
    begin
     xp:= XPixel(datos[OX, j]);
     Yp:= YPixel(datos[OY, j]);
     im.Canvas.Ellipse(xp-radio, yp-radio, xp+radio, yp+radio);
     if linea then im.Canvas.LineTo(xp, yp);
    end;
    OK:= True
    end;
        if marcarFin then
        begin
             im.Canvas.Pen.Color:= clfin;
             im.Canvas.brush.Color:= clfin;
             im.Canvas.Ellipse(xp-radio, yp-radio, xp+radio, yp+radio)
        end;
    result:= OK;
  end;

//transformaciones

function traslacion(dx, dy, dz: real; V: TPunto): TPunto;
  begin
  traslacion.X:= V.X + dx;
  traslacion.Y:= V.Y + dy;
  traslacion.Z:= V.Z + dz;
  end;

function traslacion(dx, dy, dz: real; datos: TPuntos): TPuntos; overload;
   var
      salida: TPuntos;
      j: integer;
   begin
      setlength(salida, high(datos)+1);
      for j:=0 to high(datos) do
      begin
       salida[j].X := datos[j].X + dx;
       salida[j].Y := datos[j].Y + dy;
       salida[j].Z := datos[j].Z + dz;
      end;
      result:= salida;
   end;

function traslacion(dx, dy, dz: real; var p: TPDB): integer; overload;
  var
     j: integer;
  begin
     for j:=1 to p.NumFichas do
     begin
        p.atm[j].coor.x := p.atm[j].coor.x + dx;
        p.atm[j].coor.y := p.atm[j].coor.y + dy;
        p.atm[j].coor.z := p.atm[j].coor.z + dz;
     end;
  result:= 1;
  end;

function GiroOX(rad: real; V: TPunto): TPunto;
  var
     seno, coseno: real;
  begin
     seno:= sin(rad);
     coseno:= cos(rad);

     GiroOX.X:= V.X;
     GiroOX.Y:= V.Y*coseno - V.Z*seno;
     GiroOX.Z:= V.Y*seno + V.Z*coseno;
  end;

function GiroOX(rad: real; datos: TPuntos): TPuntos; overload;
  var
     s: TPuntos;
     j: integer;
  begin
     setlength(s, high(datos)+1);
     for j:=0 to high(datos) do
     begin
        s[j]:= GiroOX(rad, datos[j]);
     end;
     result := s;
  end;

function GiroOX(rad: real; var p: TPDB): integer; overload;
  var
     j:integer;
     seno, coseno: real;
  begin
     for j:=1 to p.NumFichas do
     begin
          seno:= sin(rad);
          coseno:= cos(rad);
          p.atm[j].coor.y := p.atm[j].coor.y*coseno-p.atm[j].coor.z*seno;
          p.atm[j].coor.z := p.atm[j].coor.z*coseno + p.atm[j].coor.y*seno;
     end;
     result:=1;
  end;

function GiroOY(rad: real; V: TPunto): TPunto;
  var
     seno, coseno: real;
  begin
     seno:= sin(rad);
     coseno:= cos(rad);

     GiroOY.X:= V.X*coseno + V.Z*seno;
     GiroOY.Y:= V.Y;
     GiroOY.Z:= V.Z*coseno - V.X*seno;
  end;

function GiroOY(rad: real; datos: TPuntos): TPuntos; overload;
  var
     s: TPuntos;
     j: integer;
  begin
     setlength(s, high(datos)+1);
     for j:=0 to high(datos) do
     begin
       s[j] := GiroOY(rad, datos[j]);
     end;
     result := s;
  end;

function GiroOY(rad: real; var p: TPDB): integer; overload;
  var
     j: integer;
     seno, coseno: real;
  begin
    seno:= sin(rad);
    coseno:= cos(rad);
    for j:=1 to p.NumFichas do
    begin
      p.atm[j].coor.X:= p.atm[j].coor.X*coseno + p.atm[j].coor.Z*seno;
      p.atm[j].coor.Z:= p.atm[j].coor.Z*coseno - p.atm[j].coor.Z*seno;
    end;
    result:= 1;
  end;

function girarTPuntos(rad: real; datos: TPuntos; function_girar:TTransformTPuntoFunc): TPuntos;
  var
   s: Tpuntos;
   j: integer;
  begin
   setlength(s, high(datos)+1);
   for j:= 0 to high(datos) do
   begin
    s[j]:= function_girar(rad, datos[j]);
   end;
   result := s;
  end;

function GiroOZ(rad: real; V: TPunto): TPunto;
 var
    seno, coseno: real;
 begin
    seno:= sin(rad);
    coseno:= cos(rad);

    GiroOZ.X:= V.X*coseno + V.Y*seno;
    GiroOZ.Y:= V.X*seno + V.Y*coseno;
    GiroOZ.Z:= V.Z;
 end;

function GiroOZ(rad: real; datos: TPuntos): TPuntos; overload;
 var
    s: TPuntos;
    j: integer;
 begin
    setlength(s, high(datos)+1);
    for j:=0 to high(datos) do
    begin
      s[j]:= GiroOZ(rad, datos[j]);
    end;
    result := s;
 end;

function GiroOZ(rad: real; var p: TPDB): integer; overload;
 var
    j: integer;
    seno, coseno: real;
 begin
   seno:= sin(rad);
   coseno:= cos(rad);
   for j:=1 to p.NumFichas do
   begin
     p.atm[j].coor.X:= p.atm[j].coor.X*coseno - p.atm[j].coor.Y*seno;
     p.atm[j].coor.Y:= p.atm[j].coor.Y*coseno + p.atm[j].coor.X*seno;
   end;
   result:=1;
 end;


 //funciones Alinear Z

 function Alinear_eje_Z(puntos: TPuntos): TPuntos;
   var
      salida: TPuntos;
      p1, p2: TPunto;
      a, b, c, d1, d2, alfa, phi, senoalfa, senophi: real;
   begin
      setlength(salida, high(puntos)+1);
      p1:= puntos[0];
      salida:= traslacion(-p1.x, -p1.y, -p1.z, puntos);
      p2:= salida[high(salida)];                                l
      a:= p2.X;
      b:= p2.Y;
      c:= p2.Z;
      d1:= sqrt(sqr(b)+ sqr(c));
      d2:= sqrt(sqr(a) + sqr(b)+ sqr(c));
      senoalfa:= a/d2;
      senophi:= b/d1;
      phi:= arcsin(senophi);
      alfa:= arcsin(senoalfa);
      //hay que justificar el signo de no se que xd (cuadrante de yo que se qué)
      if c<0 then phi:= -phi else alfa:= -alfa; //esto es lo que hay que justificar
      salida:= GiroOX(phi, salida);
      salida:= GiroOY(alfa, salida);
      result:= salida;

 end;



function writePDB(







end.

